# Definindo a pasta de trabalho
setwd("C:/Projetos/POWERBI/Cap15")
getwd()
install.packages("rlang")
install.packages("rlang")
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
install.packages("randomForest")
install.packages("e1071")
library(Amelia)
library(Amelia)
library(ggplot2)
library(reshape)
library(caret)
library(randomForest)
library(dplyr)
library(e1071)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
dados_clientes <- read.csv("C:/Projetos/POWERBI/Cap15/dataset.csv")
View(dados_clientes)
dim(dados_clientes)
str(dados_clientes)
summary(dados_clientes)
dados_clientes$ID <- NULL
dim(dados_clientes)
View(dados_clientes)
colnames(dados_clientes)
colnames(dados_clientes)[24] <- "inadimplente"
colnames(dados_clientes)
View(dados_clientes)
sapply(dados_clientes, function(x) sum(is.na(x)))
# Visualizando os dados e sua estrutura
View(dados_clientes)
dados_clientes <- na.omit(dados_clientes)
str(dados_clientes)
colnames(dados_clientes)
colnames(dados_clientes)[2] <- "Genero"
colnames(dados_clientes)[3] <- "Escolaridade"
colnames(dados_clientes)[4] <- "Estado_Civil"
colnames(dados_clientes)[5] <- "Idade"
colnames(dados_clientes)
View(dados_clientes)
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
dados_clientes$Genero <- cut(dados_clientes$Genero,
c(0,1,2),
labels = c("Masculino",
"Feminino"))
View(dados_clientes$Genero)
str(dados_clientes$Genero)
summary(dados_clientes$Genero)
str(dados_clientes$Escolaridade)
summary(dados_clientes$Escolaridade)
dados_clientes$Escolaridade <- cut(dados_clientes$Escolaridade,
c(0,1,2,3,4),
labels = c("Pos Graduado",
"Graduado",
"Ensino Medio",
"Outros"))
View(dados_clientes$Escolaridade)
str(dados_clientes$Escolaridade)
summary(dados_clientes$Escolaridade)
str(dados_clientes$Estado_Civil)
summary(dados_clientes$Estado_Civil)
dados_clientes$Estado_Civil <- cut(dados_clientes$Estado_Civil,
c(-1,0,1,2,3),
labels = c("Desconhecido",
"Casado",
"Solteiro",
"Outro"))
View(dados_clientes$Estado_Civil)
str(dados_clientes$Estado_Civil)
summary(dados_clientes$Estado_Civil)
str(dados_clientes$Idade)
summary(dados_clientes$Idade)
hist(dados_clientes$Idade)
dados_clientes$Idade <- cut(dados_clientes$Idade,
c(0,30,50,100),
labels = c("Jovem",
"Adulto",
"Idoso"))
View(dados_clientes$Idade)
str(dados_clientes$Idade)
summary(dados_clientes$Idade)
View(dados_clientes)
dados_clientes$PAY_0 <- as.factor(dados_clientes$PAY_0)
dados_clientes$PAY_2 <- as.factor(dados_clientes$PAY_2)
dados_clientes$PAY_3 <- as.factor(dados_clientes$PAY_3)
dados_clientes$PAY_4 <- as.factor(dados_clientes$PAY_4)
dados_clientes$PAY_5 <- as.factor(dados_clientes$PAY_5)
dados_clientes$PAY_6 <- as.factor(dados_clientes$PAY_6)
str(dados_clientes)
sapply(dados_clientes, function(x) sum(is.na(x)))
missmap(dados_clientes, main = "Valores Missing Observados")
?missmap
str(dados_clientes)
sapply(dados_clientes, function(x) sum(is.na(x)))
missmap(dados_clientes, main = "Valores Missing Observados")
dados_clientes <- na.omit(dados_clientes)
missmap(dados_clientes, main = "Valores Missing Observados")
dim(dados_clientes)
View(dados_clientes)
str(dados_clientes$inadimplente)
colnames(dados_clientes)
dados_clientes$inadimplente <- as.factor(dados_clientes$inadimplente)
str(dados_clientes$inadimplente)
View(dados_clientes)
table(dados_clientes$inadimplente)
prop.table(table(dados_clientes$inadimplente))
qplot(inadimplente, data = dados_clientes, geom = "bar") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
qplot(inadimplente, data = dados_clientes, geom = "bar") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
qplot(inadimplente, data = dados_clientes, geom = "bar") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
set.seed(12345)
install.packages("caret", repos = "http://cran.r-project.org")
install.packages("caret", repos = "http://cran.r-project.org")
install.packages("caret", repos = "http://cran.r-project.org")
library(caret)
indice <- createDataPartition(dados_clientes$inadimplente, p = 0.75, list = FALSE)
dim(indice)
dim(indice)
dados_treino <- dados_clientes[indice,]
dim(dados_treino)
table(dados_treino$inadimplente)
prop.table(table(dados_treino$inadimplente))
dim(dados_treino)
compara_dados <- cbind(prop.table(table(dados_treino$inadimplente)),
prop.table(table(dados_clientes$inadimplente)))
colnames(compara_dados) <- c("Treinamento", "Original")
compara_dados
melt_compara_dados <- melt(compara_dados)
?reshape2::melt
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
library(reshape2)
melt_compara_dados <- melt(compara_dados)
melt_compara_dados
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
melt_compara_dados
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dados_teste <- dados_clientes[-indice,]
dim(dados_teste)
dim(dados_treino)
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
melt_compara_dados - melt(compara_dados)
melt_compara_dados <- melt(compara_dados)
library(reshape2)
library(Amelia)
library(ggplot2)
library(reshape2)
library(caret)
library(randomForest)
library(dplyr)
library(e1071)
install.packages("rlang")
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape2")
install.packages("randomForest")
install.packages("e1071")
install.packages("rlang")
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape2")
install.packages("randomForest")
install.packages("e1071")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape2")
library(Amelia)
library(ggplot2)
library(reshape2)
library(caret)
library(randomForest)
library(dplyr)
library(e1071)
qplot(inadimplente, data = dados_clientes, geom = "bar") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
melt_compara_dados <- melt(compara_dados)
melt_compara_dados
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dados_teste <- dados_clientes[-indice,]
dim(dados_teste)
dim(dados_treino)
View(dados_treino)
modelo_v1 <- randomForest(inadimplente ~ ., data = dados_treino)
modelo_v1
# Tudo o que nÃ£o estÃ¡ no dataset de treinamento estÃ¡ no dataset de teste. Observe o sinal - (menos)
dados_teste <- dados_clientes[-indice,]
ggplot(melt_compara_dados, aes(x = X1, y = value)) +
geom_bar( aes(fill = X2), stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dados_teste <- dados_clientes[-indice,]
dim(dados_teste)
dim(dados_treino)
View(dados_treino)
modelo_v1 <- randomForest(inadimplente ~ ., data = dados_treino)
modelo_v1
previsoes_v1 <- predict(modelo_v1, dados_teste)
cm_v1 <- caret::confusionMatrix(previsoes_v1, dados_teste$inadimplente, positive = "1")
cm_v1
cm_v1
y <- dados_teste$inadimplente
y_pred_v1 <- previsoes_v1
precision <- posPredValue(y_pred_v1, y)
precision
recall <- sensitivity(y_pred_v1, y)
recall
F1 <- (2 * precision * recall) / (precision + recall)
F1
install.packages("DMwR")
library(DMwR)
table(dados_treino$inadimplente)
prop.table(table(dados_treino$inadimplente))
set.seed(9560)
dados_treino_bal <- SMOTE(inadimplente ~ ., data  = dados_treino)
table(dados_treino_bal$inadimplente)
prop.table(table(dados_treino_bal$inadimplente))
table(dados_treino_bal$inadimplente)
prop.table(table(dados_treino_bal$inadimplente))
prop.table(table(dados_treino$inadimplente))
modelo_v2 <- randomForest(inadimplente ~ ., data = dados_treino_bal)
modelo_v2
plot(modelo_v2)
previsoes_v2 <- predict(modelo_v2, dados_teste)
cm_v2 <- caret::confusionMatrix(previsoes_v2, dados_teste$inadimplente, positive = "1")
cm_v2
y <- dados_teste$inadimplente
y_pred_v2 <- previsoes_v2
cm_v1
cm_v2
y <- dados_teste$inadimplente
y_pred_v2 <- previsoes_v2
precision <- posPredValue(y_pred_v2, y)
precision
recall <- sensitivity(y_pred_v2, y)
recall
F1 <- (2 * precision * recall) / (precision + recall)
F1
View(dados_treino_bal)
varImpPlot(modelo_v2)
imp_var <- importance(modelo_v2)
varImportance <- data.frame(Variables = row.names(imp_var),
Importance = round(imp_var[ ,'MeanDecreaseGini'],2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#', dense_rank(desc(Importance))))
ggplot(rankImportance,
aes(x = reorder(Variables, Importance),
y = Importance,
fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust = 0,
vjust = 0.55,
size = 4,
colour = 'red') +
labs(x = 'Variables') +
coord_flip()
colnames(dados_treino_bal)
modelo_v3 <- randomForest(inadimplente ~ PAY_0 + PAY_2 + PAY_3 + PAY_AMT1 + PAY_AMT2 + PAY_5 + BILL_AMT1,
data = dados_treino_bal)
modelo_v3
plot(modelo_v3)
previsoes_v3 <- predict(modelo_v3, dados_teste)
cm_v3 <- caret::confusionMatrix(previsoes_v3, dados_teste$inadimplente, positive = "1")
cm_v3
y <- dados_teste$inadimplente
y_pred_v3 <- previsoes_v3
precision <- posPredValue(y_pred_v3, y)
precision
recall <- sensitivity(y_pred_v3, y)
recall
F1 <- (2 * precision * recall) / (precision + recall)
F1
saveRDS(modelo_v3, file = "modelo/modelo_v3.rds")
modelo_final <- readRDS("modelo/modelo_v3.rds")
PAY_0 <- c(0, 0, 0)
PAY_2 <- c(0, 0, 0)
PAY_3 <- c(1, 0, 0)
PAY_AMT1 <- c(1100, 1000, 1200)
PAY_AMT2 <- c(1500, 1300, 1150)
PAY_5 <- c(0, 0, 0)
BILL_AMT1 <- c(350, 420, 280)
novos_clientes <- data.frame(PAY_0, PAY_2, PAY_3, PAY_AMT1, PAY_AMT2, PAY_5, BILL_AMT1)
View(novos_clientes)
previsoes_novos_clientes <- predict(modelo_final, novos_clientes)
str(dados_treino_bal)
str(novos_clientes)
novos_clientes$PAY_0 <- factor(novos_clientes$PAY_0, levels = levels(dados_treino_bal$PAY_0))
novos_clientes$PAY_2 <- factor(novos_clientes$PAY_2, levels = levels(dados_treino_bal$PAY_2))
novos_clientes$PAY_3 <- factor(novos_clientes$PAY_3, levels = levels(dados_treino_bal$PAY_3))
novos_clientes$PAY_5 <- factor(novos_clientes$PAY_5, levels = levels(dados_treino_bal$PAY_5))
str(novos_clientes)
previsoes_novos_clientes <- predict(modelo_final, novos_clientes)
View(previsoes_novos_clientes)
cm_v3
cm_v2
cm_v1
previsoes_novos_clientes <- predict(modelo_final, novos_clientes)
str(dados_treino_bal)
str(novos_clientes)
novos_clientes$PAY_0 <- factor(novos_clientes$PAY_0, levels = levels(dados_treino_bal$PAY_0))
novos_clientes$PAY_2 <- factor(novos_clientes$PAY_2, levels = levels(dados_treino_bal$PAY_2))
novos_clientes$PAY_3 <- factor(novos_clientes$PAY_3, levels = levels(dados_treino_bal$PAY_3))
novos_clientes$PAY_5 <- factor(novos_clientes$PAY_5, levels = levels(dados_treino_bal$PAY_5))
str(novos_clientes)
previsoes_novos_clientes <- predict(modelo_final, novos_clientes)
View(previsoes_novos_clientes)
